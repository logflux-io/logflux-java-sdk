name: Java SDK Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.0)'
        required: true
        type: string
      next_version:
        description: 'Next development version (e.g., 1.3.0-SNAPSHOT)'
        required: true
        type: string
  push:
    tags:
      - 'java-v*'

jobs:
  validate:
    runs-on: [self-hosted, linux, arm64, docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 16
      uses: actions/setup-java@v4
      with:
        java-version: '16'
        distribution: 'temurin'
        
    - name: Set up Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: 3.9.6
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run full validation
      run: |
        mvn clean compile
        mvn test
        mvn package
        mvn verify
        
    - name: Check for uncommitted changes
      run: |
        if [[ -n $(git status -s) ]]; then
          echo "Error: Uncommitted changes detected"
          git status -s
          exit 1
        fi

  release:
    runs-on: [self-hosted, linux, arm64, docker]
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Set up JDK 16
      uses: actions/setup-java@v4
      with:
        java-version: '16'
        distribution: 'temurin'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        
    - name: Set up Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: 3.9.6
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
    - name: Set release version
      if: github.event_name == 'workflow_dispatch'
      run: |
        mvn versions:set -DnewVersion=${{ github.event.inputs.version }}
        mvn versions:commit
        
    - name: Extract version from tag
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        VERSION=${GITHUB_REF#refs/tags/java-v}
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Build release artifacts
      run: |
        mvn clean package -DskipTests
        mvn javadoc:jar
        mvn source:jar
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Java SDK ${{ env.RELEASE_VERSION || github.event.inputs.version }}
        body: |
          Release of LogFlux Java SDK version ${{ env.RELEASE_VERSION || github.event.inputs.version }}
          
          ## Installation
          
          ### Maven
          ```xml
          <dependency>
              <groupId>io.logflux</groupId>
              <artifactId>logflux-agent-java-sdk</artifactId>
              <version>${{ env.RELEASE_VERSION || github.event.inputs.version }}</version>
          </dependency>
          ```
          
          ### Gradle
          ```gradle
          implementation 'io.logflux:logflux-agent-java-sdk:${{ env.RELEASE_VERSION || github.event.inputs.version }}'
          ```
          
          ## Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/sdk/java/CHANGELOG.md) for details.
        draft: false
        prerelease: false
        
    - name: Upload JAR to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/logflux-agent-java-sdk-${{ env.RELEASE_VERSION || github.event.inputs.version }}.jar
        asset_name: logflux-agent-java-sdk-${{ env.RELEASE_VERSION || github.event.inputs.version }}.jar
        asset_content_type: application/java-archive
        
    - name: Upload Javadoc JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/logflux-agent-java-sdk-${{ env.RELEASE_VERSION || github.event.inputs.version }}-javadoc.jar
        asset_name: logflux-agent-java-sdk-${{ env.RELEASE_VERSION || github.event.inputs.version }}-javadoc.jar
        asset_content_type: application/java-archive
        
    - name: Upload Sources JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/logflux-agent-java-sdk-${{ env.RELEASE_VERSION || github.event.inputs.version }}-sources.jar
        asset_name: logflux-agent-java-sdk-${{ env.RELEASE_VERSION || github.event.inputs.version }}-sources.jar
        asset_content_type: application/java-archive
        
    - name: Deploy to Maven Central
      if: env.MAVEN_USERNAME != ''
      run: |
        mvn deploy -DskipTests
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        
    - name: Set next development version
      if: github.event_name == 'workflow_dispatch'
      run: |
        mvn versions:set -DnewVersion=${{ github.event.inputs.next_version }}
        mvn versions:commit
        git add pom.xml
        git commit -m "Prepare for next development iteration: ${{ github.event.inputs.next_version }}"
        git push origin main
        
    - name: Create release tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        git tag -a "java-v${{ github.event.inputs.version }}" -m "Java SDK Release ${{ github.event.inputs.version }}"
        git push origin "java-v${{ github.event.inputs.version }}"

  publish-documentation:
    runs-on: [self-hosted, linux, arm64, docker]
    needs: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 16
      uses: actions/setup-java@v4
      with:
        java-version: '16'
        distribution: 'temurin'
        
    - name: Generate Javadoc
      run: |
        mvn javadoc:javadoc
        mvn site
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: target/site
        destination_dir: java-sdk